from hashlib import new
from qns.schedular import Event
from qns.schedular import Simulator


class GenerationAndSendEvent(Event):
    '''
    This event is generated by ``PhotonRandomSendProtocol``. It is used to periodly generate new photon and send it.

    :param protocol: a ``PhotonRandomSendProtocol``
    :param source: the sender quantum node
    :param init_time: the event's generation time.
    '''

    def __init__(self, protocol, source=None, init_time: float = None):
        super().__init__(init_time)
        self.protocol = protocol
        self.source = source

    def run(self, simulator: Simulator):
        '''
        This event will call ``PhotonRandomSendProtocol``'s ``run`` function to generate and send new photon.
        '''
        # self.node.call(simulator, (self.e1, self.e2),
        #  self.source, event=self)
        self.protocol.run(simulator, self)


class PhotonReceiveEvent(Event):
    '''
    This event is generated by a ``PhotonReceiveEvent``. The fiber generate this event to notify the receiver to receive the coming photon.

    :param to: the photon receiver
    :param new_photon: the sender photon
    :param source: the photon sender
    :param init_time: the event's generation time.
    '''

    def __init__(self, to, new_photon, source=None, init_time: float = None):
        super().__init__(init_time)
        self.photon = new_photon
        self.source = source
        self.to = to

    def run(self, simulator: Simulator):
        '''
        This event will call ``PhotonReceiveAndMeasureProtocol``'s ``handle`` function to receive the photon and measure it
        '''
        # self.node.call(simulator, (self.e1, self.e2),
        #  self.source, event=self)
        self.to.call(simulator=simulator, msg=self.photon,
                     source=self.source, event=self)
